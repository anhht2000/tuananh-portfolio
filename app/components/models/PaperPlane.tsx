/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: vesicalsnail (https://sketchfab.com/milansaman21)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/paper-airplane-0967ab4a9c654a569a13ea1f8d9dca0c
Title: paper airplane
*/

import { useGLTF, useScroll } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { useRef } from 'react';
import { isMobile } from 'react-device-detect';
import * as THREE from 'three';

const PaperPlane = (props: Partial<THREE.Object3D>) => {
  const planeRef = useRef<THREE.Group>(null);
  const planeGroupRef = useRef<THREE.Group>(null);

  const { nodes, materials } = useGLTF('/paper_airplane.glb');
  const data = useScroll();

  useFrame(() => {
    const d = data.range(3.1 / 5, 1 / 4);

    if (planeRef.current && planeGroupRef.current) {
      planeGroupRef.current.position.x = ( isMobile ? 0.5 : 0) + d * (isMobile ? 2 : 10);
      planeGroupRef.current.position.y = - d * 2;
      planeGroupRef.current.position.z = - d*10;
      // rotation={[-Math.PI / 6, -Math.PI / 2, -Math.PI / 4]}

      // planeRef.current.rotation = [-(d * 10) * Math.PI / 6, - (d * 10) * Math.PI / 2, - (d * 10) * Math.PI / 4];
      planeRef.current.rotation.x = - (d* 2) * Math.PI / 12;
      planeRef.current.rotation.y = - (d* (isMobile ? 5 : 10)) * Math.PI / 2;
      planeRef.current.rotation.z = - Math.PI / 4;
    }
  });

  return (
    <group {...props} ref={planeGroupRef} dispose={null}>
      <group ref={planeRef}>
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.Object_4 as THREE.Mesh).geometry}
          material={materials.papier}
          position={[-0.794, 0, 0]}
        />
      </group>
      <pointLight position={[0, 0.8,  0]} intensity={5} distance={10}/>
      <pointLight position={[0, -1,  0]} intensity={10} distance={10}/>
    </group>
  )
}

useGLTF.preload('/paper_airplane.glb')

export default PaperPlane;
